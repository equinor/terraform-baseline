{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Equinor Terraform Baseline","text":"<p>Equinor Terraform Baseline (ETB) is:</p> <ul> <li>A set of best practices for creating reusable Terraform modules using the Azure provider.</li> <li>A library of reusable Terraform modules that have been created using these best practices.</li> </ul> <p>ETB is currently written as an extension of Terraform Best Practices, however the long-term goal is for ETB to be a complete replacement.</p> <p>Before using ETB, you should be familiar with the following pages from the official Terraform documentation:</p> <ul> <li>Standard Module Structure</li> <li>Style Guide</li> <li>Version Constraints</li> <li>Publishing Modules</li> </ul>"},{"location":"#usage","title":"Usage","text":""},{"location":"#version-updates","title":"Version updates","text":"<p>Use Dependabot to keep modules you use updated to the latest versions.</p> <p>Create a Dependabot configuration file <code>.github/dependabot.yml</code> in your repository containing the following configuration:</p> <pre><code>version: 2\nupdates:\n  - package-ecosystem: terraform\n    directories: [/terraform/**/*]\n    groups:\n      terraform:\n        patterns: [\"*\"]\n</code></pre>"},{"location":"best-practices/meta-arguments/","title":"Meta-arguments","text":""},{"location":"best-practices/meta-arguments/#lifecycle","title":"Lifecycle","text":"<ul> <li>The <code>prevent_destroy</code> lifecycle meta-argument should be used on stateful resources (e.g. databases) to mitigate the possibility of accidental data loss.</li> <li>The <code>ignore_changes</code> lifecycle meta-argument should be used sparingly, as heavy use could lead to configuration drift.</li> </ul>"},{"location":"best-practices/repository/","title":"Repository","text":"<ul> <li> <p>Use this template when creating your repository.</p> </li> <li> <p>Use the common naming convention <code>terraform-azurerm-&lt;module&gt;</code> when naming your repository, where <code>&lt;module&gt;</code> is the name of the module.</p> <p>Modules should be named after the corresponding Azure CLI group or subgroup, for example:</p> <ul> <li> <p>Terraform module <code>key-vault</code> corresponds to Azure CLI group <code>keyvault</code>.</p> </li> <li> <p>Terraform module <code>storage</code> corresponds to Azure CLI group <code>storage</code>.</p> </li> <li> <p>Terraform module <code>log-analytics</code> corresponds to Azure CLI subgroup <code>log-analytics</code>.</p> </li> </ul> </li> </ul> <p>Note</p> <p>Azure CLI uses inconsistent separation of words in group names. We choose to consistenly separate words by <code>-</code> in module names.</p> <ul> <li> <p>Configure the following accesses for the repository:</p> Team Role @equinor/terraform-baseline <code>Write</code> @equinor/terraform-baseline-admins <code>Admin</code> @equinor/terraform-baseline-maintainers <code>Maintain</code> </li> <li> <p>Configure the following code owners in a file <code>.github/CODEOWNERS</code>:</p> <pre><code>* @equinor/terraform-baseline-maintainers\n\n**/CODEOWNERS @equinor/terraform-baseline-admins\n</code></pre> </li> <li> <p>Add topics <code>terraform-baseline</code> and <code>terraform-module</code> to the repository.</p> </li> </ul>"},{"location":"best-practices/resources/","title":"Resources","text":"<ul> <li>By default, configure resources based on Microsoft security recommendations, e.g. Security recommendations for Blob storage.</li> </ul>"},{"location":"best-practices/resources/#roles-and-scope","title":"Roles and scope","text":"<ul> <li>Use resources that do not require more than <code>Contributor</code> role at the resource group scope.   If you need to use a higher role, create an example instead.</li> </ul>"},{"location":"best-practices/resources/#hidden-resources","title":"Hidden resources","text":"<ul> <li>Don't create resources that are automatically created by Azure, e.g. hidden resources such as the <code>master</code> database for an Azure SQL server:</li> </ul>"},{"location":"best-practices/resources/#modules","title":"Modules","text":"<ul> <li>A single module call should create a single instance of the main resource created by the module. For example, the <code>web-app</code> module should create a single web app, and the <code>sql</code> module should create a single server. This creates a common expectation for the behavior of our modules.</li> <li>A module should not create just a single resource. Exceptions can be made if that resource requires complex configuration or a stringent set of predefined parameters.</li> </ul>"},{"location":"best-practices/resources/#submodules","title":"Submodules","text":"<p>If a resource is a child of another resource:</p> <ul> <li>The parent resource should be configured as a module</li> <li>The child resource should be configured as a submodule</li> </ul> <p>For example, the SQL database resource is a child of the SQL server resource (a SQL database cannot exist without a SQL server):</p> <ul> <li>The SQL server resource should be configured as a module <code>sql</code></li> <li>The SQL database resource should be configured as a submodule <code>sql//modules/database</code></li> </ul>"},{"location":"best-practices/resources/#control-plane-and-data-plane","title":"Control plane and data plane","text":"<ul> <li>A module should only perform control plane operations (e.g., managing Storage account or Key vault), not data plane operations (e.g., managing Storage container or Key vault secret). See control plane and data plane in Microsoft docs.</li> </ul> <p>Performing data plane operations usually require workarounds for dealing with firewalls when run from an automated pipeline that deviate from the deterministic approach promoted by Terraform (e.g, temporarily disabling firewall or temporarily adding own IP to firewall).   This may lead to the decision of disabling a resource firewall because it is preventing data plane operations from a pipeline, lowering the security of the resource.</p> <p>Data plane operations should be handled outside of Terraform.</p> <p>Note Might be irrelevant depending on the implementation of github/roadmap#614.</p>"},{"location":"best-practices/resources/#conditional-resources","title":"Conditional resources","text":"<p>Conditional resources refers to the creation of 0 or 1 resources based on a condition.</p> <p>Use the <code>count</code> meta-argument to conditionally create resources based on a static value, for example a local or variable of type <code>string</code> or <code>bool</code>.</p> <p>Using a variable of type <code>string</code> string is the more extensible approach, as you can add more allowed values down the road:</p> <pre><code>variable \"kind\" {\n  description = \"The kind of Web App to create. Allowed values are \\\"Linux\\\" and \\\"Windows\\\".\"\n  type        = string\n  default     = \"Linux\"\n\n  validation {\n    condition     = contains([\"Linux\", \"Windows\"], var.kind)\n    error_message = \"Kind must be \\\"Linux\\\" or \\\"Windows\\\".\"\n  }\n}\n\nresource \"azurerm_linux_web_app\" \"this\" {\n  count = var.kind == \"Linux\" ? 1 : 0\n}\n\nresource \"azurerm_windows_web_app\" \"this\" {\n  count = var.kind == \"Windows\" ? 1 : 0\n}\n</code></pre>"},{"location":"best-practices/resources/#repeatable-resources","title":"Repeatable resources","text":"<p>Repeatable resources refers to the creation of 0 or more resources based on a value.</p> <p>For repeatable resources, use a variable of type <code>map(object())</code> to dynamically create the resources, where setting the value to <code>{}</code> will not create any resources.</p> <pre><code>variable \"firewall_rules\" {\n  description = \"A map of SQL firewall rules to create.\"\n\n  type = map(object({\n    name             = string\n    start_ip_address = string\n    end_ip_address   = string\n  }))\n\n  default = {}\n}\n\nresource \"azurerm_mssql_firewall_rule\" \"this\" {\n  for_each = var.firewall_rules\n\n  name             = each.value.name\n  start_ip_address = each.value.start_ip_address\n  end_ip_address   = each.value.end_ip_address\n}\n</code></pre>"},{"location":"best-practices/resources/#repeatable-nested-blocks","title":"Repeatable nested blocks","text":"<p>Repeatable nested blocks refers to the creation of 0 or more dynamic blocks based on a value.</p> <p>For repeatable nested blocks, use a variable of type <code>list(object())</code> to dynamically create the nested blocks, where setting the value to <code>[]</code> will not create any nested blocks:</p> <pre><code>variable \"auth_settings_active_directory\" {\n  description = \"A list of authentication settings using the Active Directory provider to configure for this Linux web app.\"\n\n  type = list(object({\n    client_id                  = string\n    client_secret_setting_name = string\n  }))\n\n  default = []\n}\n\nresource \"azurerm_linux_web_app\" \"this\" {\n  # omitted\n\n  auth_settings {\n    enabled = length(var.auth_settings_active_directory) == 0 ? false : true\n\n    dynamic \"active_directory\" {\n      for_each = var.auth_settings_active_directory\n\n      content {\n        client_id                  = active_directory.value[\"client_id\"]\n        client_secret_setting_name = active_directory.value[\"client_secret_setting_name\"]\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"best-practices/resources/#non-repeatable-nested-blocks","title":"Non-repeatable nested blocks","text":"<p>Non-repeatable nested blocks refers to the creation of 0 or 1 dynamic blocks based on a value.</p> <p>For non-repeatable nested blocks, use a variable of type <code>object()</code> to dynamically create the nested block, where setting the value to <code>null</code> will not create the nested block:</p> <pre><code>variable \"blob_properties\" {\n  description = \"The blob properties for this storage account.\"\n\n  type = object({\n    versioning_enabled  = optional(bool, true)\n    change_feed_enabled = optional(bool, true)\n  })\n\n  default = {}\n}\n\nresource \"azurerm_storage_account\" \"this\" {\n  # omitted\n\n  dynamic \"blob_properties\" {\n    for_each = var.blob_properties != null ? [var.blob_properties] : []\n\n    content {\n      versioning_enabled  = blob_properties.value[\"versioning_enabled\"]\n      change_feed_enabled = blob_properties.value[\"change_feed_enabled\"]\n    }\n  }\n}\n</code></pre> <p>Rationale</p> <p>A nested block may not be supported in certain scenarios. For example, the <code>blob_properties</code> nested block for the <code>azurerm_storage_account</code> resource is only supported if the value of the <code>account_kind</code> argument is set to <code>StorageV2</code> or <code>BlobStorage</code>.</p> <p>Exceptions</p> <ul> <li>Blocks that are defined as required by the provider (e.g. the <code>site_config</code> block for the <code>azurerm_linux_web_app</code> resource).</li> <li>Blocks that are optional but requires an argument to enable/disable its functionality (e.g. the <code>auth_settings</code> block for the <code>azurerm_linux_web_app</code> resource which requires an argument <code>enabled</code>).</li> </ul>"},{"location":"best-practices/testing/","title":"Testing","text":"<ul> <li>Automated tests should be implemented for all variants of the relevant resource using Terratest. For example, in the <code>storage</code> module, automated tests should be implemented for standard GPv2 storage, premium GPv2 storage, standard blob storage, premium block blob storage and premium file storage.</li> </ul>"},{"location":"best-practices/variables-and-outputs/","title":"Variables and outputs","text":""},{"location":"best-practices/variables-and-outputs/#general","title":"General","text":"<ul> <li>All arguments should be made available as variables.</li> <li>All attributes should be made available as outputs.</li> </ul>"},{"location":"best-practices/variables-and-outputs/#variable-and-output-names","title":"Variable and output names","text":"<ul> <li> <p>Variables should follow a common naming convention:</p> <pre><code>&lt;resource&gt;_&lt;block&gt;_&lt;argument&gt;\n</code></pre> </li> <li> <p>Outputs should follow a common naming convetion:</p> <pre><code>&lt;resource&gt;_&lt;block&gt;_&lt;attribute&gt;\n</code></pre> <p>Exception</p> <p>Variable and output names that contain the module name. For example, in module <code>storage</code> the variable <code>storage_account_name</code> should be named <code>account_name</code> instead.</p> </li> </ul>"},{"location":"best-practices/variables-and-outputs/#variable-and-output-descriptions","title":"Variable and output descriptions","text":"<ul> <li>Use description to describe the values of variables and outputs.</li> <li> <p>If valid variable values is known:</p> <ol> <li> <p>If set of valid values is known, append to description:</p> <pre><code>Value must be X or Y.\n</code></pre> <p>Else, if range of valid values is known, append to description:</p> <pre><code>Value must be between X and Y.\n</code></pre> <p>Else, if subset of valid values is known, append to description:</p> <pre><code>Possible values include X, Y and Z.\n</code></pre> <p>Else, if format of valid values is known, append to description:</p> <pre><code>Value must be in F format, e.g. X, Y and Z.\n</code></pre> </li> <li> <p>Add custom validation rules to check if variable value is valid.</p> </li> </ol> </li> </ul>"},{"location":"best-practices/variables-and-outputs/#variable-and-output-types","title":"Variable and output types","text":"<ul> <li> <p>Use simple types (<code>string</code>, <code>number</code> and <code>bool</code>) over complex types (<code>list</code>, <code>object</code> and <code>map</code>) for variables and outputs where possible:</p> <p>Rationale</p> <p>Variables and outputs of simpler types are easier to write good descriptions for. For example, it's easier to write a good description for a simple <code>string</code> than for an <code>object</code> with multiple <code>string</code> properties. It's also easier for a user to pass a simple <code>string</code> to a variable than to construct and pass a complex <code>object</code>.</p> </li> </ul>"},{"location":"get-started/","title":"Get started","text":"<p>The goal of this section is to get you up and running with Terraform in X time.</p> <p>It'll cover the basics for everything between installing the required tools, and managing the full lifecycle of a resource in Azure.</p>"},{"location":"get-started/create-resources/","title":"Create resources","text":"<p>Let's create an Azure Storage account using Terraform:</p> <ol> <li> <p>Create a file <code>main.tf</code>.</p> </li> <li> <p>Configure the Azure provider:</p> <pre><code>provider \"azurerm\" {\n  features {}\n}\n</code></pre> </li> <li> <p>Read the Azure resource group you created into Terraform by using a data source:</p> <pre><code>data \"azurerm_resource_group\" \"example\" {\n  name = \"example-rg\"\n}\n</code></pre> </li> <li> <p>Create a random suffix for resource names using the built-in random provider, and an Azure Storage account in the resource group:</p> <pre><code>resource \"random_id\" \"suffix\" {\n  byte_length = 4\n}\n\nresource \"azurerm_storage_account\" \"example\" {\n  name                     = \"examplest${random_id.suffix.hex}\"\n  resource_group_name      = data.azurerm_resource_group.example.name\n  location                 = data.azurerm_resource_group.example.location\n  account_tier             = \"Standard\"\n  account_replication_type = \"LRS\"\n}\n</code></pre> <p>Show <code>main.tf</code> contents <pre><code>$ cat main.tf\nprovider \"azurerm\" {\n  features {}\n}\n\ndata \"azurerm_resource_group\" \"example\" {\n  name = \"example-rg\"\n}\n\nresource \"random_id\" \"suffix\" {\n  byte_length = 4\n}\n\nresource \"azurerm_storage_account\" \"example\" {\n  name                     = \"examplest${random_id.suffix.hex}\"\n  resource_group_name      = data.azurerm_resource_group.example.name\n  location                 = data.azurerm_resource_group.example.location\n  account_tier             = \"Standard\"\n  account_replication_type = \"LRS\"\n}\n</code></pre> <li> <p>Initialize your Terraform configuration to install all required provider plugins:</p> <pre><code>terraform init\n</code></pre> <p>Two files will be automatically created:</p> Name Description <code>.terraform</code> A directory containing installed provider plugins <code>.terraform.lock.hcl</code> A file containing a record of installed provider plugins </li> <li> <p>Validate your Terraform configuration to check for errors such as non-existent references:</p> <pre><code>terraform validate\n</code></pre> </li> <li> <p>Generate an execution plan and store it in a file <code>tfplan</code>:</p> <pre><code>terraform plan -out=tfplan\n</code></pre> <p>A single file will be automatically created:</p> Name Description <code>tfplan</code> A file containing the generated execution plan <p>Show execution plan <pre><code>$ terraform show tfplan\n\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:\n  + create\n\nTerraform will perform the following actions:\n\n  # azurerm_storage_account.example will be created\n  + resource \"azurerm_storage_account\" \"example\" {\n      + access_tier                       = (known after apply)\n      + account_kind                      = \"StorageV2\"\n      + account_replication_type          = \"LRS\"\n      + account_tier                      = \"Standard\"\n      + allow_nested_items_to_be_public   = true\n      + cross_tenant_replication_enabled  = true\n      + default_to_oauth_authentication   = false\n      + enable_https_traffic_only         = true\n      + id                                = (known after apply)\n      + infrastructure_encryption_enabled = false\n      + is_hns_enabled                    = false\n      + large_file_share_enabled          = (known after apply)\n      + location                          = \"northeurope\"\n      + min_tls_version                   = \"TLS1_2\"\n      + name                              = (known after apply)\n      + nfsv3_enabled                     = false\n      + primary_access_key                = (sensitive value)\n      + primary_blob_connection_string    = (sensitive value)\n      + primary_blob_endpoint             = (known after apply)\n      + primary_blob_host                 = (known after apply)\n      + primary_connection_string         = (sensitive value)\n      + primary_dfs_endpoint              = (known after apply)\n      + primary_dfs_host                  = (known after apply)\n      + primary_file_endpoint             = (known after apply)\n      + primary_file_host                 = (known after apply)\n      + primary_location                  = (known after apply)\n      + primary_queue_endpoint            = (known after apply)\n      + primary_queue_host                = (known after apply)\n      + primary_table_endpoint            = (known after apply)\n      + primary_table_host                = (known after apply)\n      + primary_web_endpoint              = (known after apply)\n      + primary_web_host                  = (known after apply)\n      + public_network_access_enabled     = true\n      + queue_encryption_key_type         = \"Service\"\n      + resource_group_name               = \"example-rg\"\n      + secondary_access_key              = (sensitive value)\n      + secondary_blob_connection_string  = (sensitive value)\n      + secondary_blob_endpoint           = (known after apply)\n      + secondary_blob_host               = (known after apply)\n      + secondary_connection_string       = (sensitive value)\n      + secondary_dfs_endpoint            = (known after apply)\n      + secondary_dfs_host                = (known after apply)\n      + secondary_file_endpoint           = (known after apply)\n      + secondary_file_host               = (known after apply)\n      + secondary_location                = (known after apply)\n      + secondary_queue_endpoint          = (known after apply)\n      + secondary_queue_host              = (known after apply)\n      + secondary_table_endpoint          = (known after apply)\n      + secondary_table_host              = (known after apply)\n      + secondary_web_endpoint            = (known after apply)\n      + secondary_web_host                = (known after apply)\n      + sftp_enabled                      = false\n      + shared_access_key_enabled         = true\n      + table_encryption_key_type         = \"Service\"\n    }\n\n  # random_id.suffix will be created\n  + resource \"random_id\" \"suffix\" {\n      + b64_std     = (known after apply)\n      + b64_url     = (known after apply)\n      + byte_length = 8\n      + dec         = (known after apply)\n      + hex         = (known after apply)\n      + id          = (known after apply)\n    }\n\nPlan: 2 to add, 0 to change, 0 to destroy.\n</code></pre> <li> <p>Run the execution plan:</p> <pre><code>terraform apply tfplan\n</code></pre> <p>This will create the resources shown in the execution plan.</p> <p>A single file will be automatically created:</p> Name Description <code>terraform.tfstate</code> A file containing the last known configuration (state) of your infrastructure <p>Feel free to have a quick look at the state file. Notice how the state file keeps track of the configuration of all read data sources and created resources. You must never modify the state file manually; all changes should go through Terraform.</p> </li> <li> <p>Verify that the Storage account has been created in the resource group:</p> <pre><code>$ az resource list -g example-rg -o table\nName               ResourceGroup    Location     Type                               Status\n-----------------  ---------------  -----------  ---------------------------------  --------\nexamplestd64f295a  example-rg       northeurope  Microsoft.Storage/storageAccounts\n</code></pre> <p>It might take a few minutes before the Storage account appears in the output.</p> </li> <p>Congrats, you've created your first resource using Terraform!</p> <p>As mentioned earlier, Terraform not only allows you to create new resources, but to effectively manage its entire lifecycle.</p> <p>Next, we'll make an update to the Storage account configuration, before we tear it all down again!</p>"},{"location":"get-started/destroy-resources/","title":"Destroy resources","text":"<ol> <li> <p>Remove all data sources and resources from your code, so that only the provider configuration remains:</p> <pre><code>provider \"azurerm\" {\n  features {}\n}\n</code></pre> </li> <li> <p>Generate a new execution plan:</p> <pre><code>terraform plan -out=tfplan\n</code></pre> <p>Show execution plan <pre><code>$ terraform show tfplan\n\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:\n  - destroy\n\nTerraform will perform the following actions:\n\n  # azurerm_storage_account.example will be destroyed\n  # (because azurerm_storage_account.example is not in configuration)\n  - resource \"azurerm_storage_account\" \"example\" {\n      - access_tier                       = \"Hot\" -&gt; null\n      - account_kind                      = \"StorageV2\" -&gt; null\n      - account_replication_type          = \"GRS\" -&gt; null\n      - account_tier                      = \"Standard\" -&gt; null\n      - allow_nested_items_to_be_public   = true -&gt; null\n      - cross_tenant_replication_enabled  = true -&gt; null\n      - default_to_oauth_authentication   = false -&gt; null\n      - enable_https_traffic_only         = true -&gt; null\n      - id                                = \"/subscriptions/&lt;SUBSCRIPTION_ID&gt;/resourceGroups/example-rg/providers/Microsoft.Storage/storageAccounts/examplestd64f295a\" -&gt; null\n      - infrastructure_encryption_enabled = false -&gt; null\n      - is_hns_enabled                    = false -&gt; null\n      - location                          = \"northeurope\" -&gt; null\n      - min_tls_version                   = \"TLS1_2\" -&gt; null\n      - name                              = \"examplestd64f295a\" -&gt; null\n      - nfsv3_enabled                     = false -&gt; null\n      - primary_access_key                = (sensitive value) -&gt; null\n      - primary_blob_connection_string    = (sensitive value) -&gt; null\n      - primary_blob_endpoint             = \"https://examplestd64f295a.blob.core.windows.net/\" -&gt; null\n      - primary_blob_host                 = \"examplestd64f295a.blob.core.windows.net\" -&gt; null\n      - primary_connection_string         = (sensitive value) -&gt; null\n      - primary_dfs_endpoint              = \"https://examplestd64f295a.dfs.core.windows.net/\" -&gt; null\n      - primary_dfs_host                  = \"examplestd64f295a.dfs.core.windows.net\" -&gt; null\n      - primary_file_endpoint             = \"https://examplestd64f295a.file.core.windows.net/\" -&gt; null\n      - primary_file_host                 = \"examplestd64f295a.file.core.windows.net\" -&gt; null\n      - primary_location                  = \"northeurope\" -&gt; null\n      - primary_queue_endpoint            = \"https://examplestd64f295a.queue.core.windows.net/\" -&gt; null\n      - primary_queue_host                = \"examplestd64f295a.queue.core.windows.net\" -&gt; null\n      - primary_table_endpoint            = \"https://examplestd64f295a.table.core.windows.net/\" -&gt; null\n      - primary_table_host                = \"examplestd64f295a.table.core.windows.net\" -&gt; null\n      - primary_web_endpoint              = \"https://examplestd64f295a.z16.web.core.windows.net/\" -&gt; null\n      - primary_web_host                  = \"examplestd64f295a.z16.web.core.windows.net\" -&gt; null\n      - public_network_access_enabled     = true -&gt; null\n      - queue_encryption_key_type         = \"Service\" -&gt; null\n      - resource_group_name               = \"example-rg\" -&gt; null\n      - secondary_access_key              = (sensitive value) -&gt; null\n      - secondary_connection_string       = (sensitive value) -&gt; null\n      - sftp_enabled                      = false -&gt; null\n      - shared_access_key_enabled         = true -&gt; null\n      - table_encryption_key_type         = \"Service\" -&gt; null\n      - tags                              = {} -&gt; null\n\n      - blob_properties {\n          - change_feed_enabled           = false -&gt; null\n          - change_feed_retention_in_days = 0 -&gt; null\n          - last_access_time_enabled      = false -&gt; null\n          - versioning_enabled            = false -&gt; null\n        }\n\n      - network_rules {\n          - bypass                     = [\n              - \"AzureServices\",\n            ] -&gt; null\n          - default_action             = \"Allow\" -&gt; null\n          - ip_rules                   = [] -&gt; null\n          - virtual_network_subnet_ids = [] -&gt; null\n        }\n\n      - queue_properties {\n          - hour_metrics {\n              - enabled               = true -&gt; null\n              - include_apis          = true -&gt; null\n              - retention_policy_days = 7 -&gt; null\n              - version               = \"1.0\" -&gt; null\n            }\n          - logging {\n              - delete                = false -&gt; null\n              - read                  = false -&gt; null\n              - retention_policy_days = 0 -&gt; null\n              - version               = \"1.0\" -&gt; null\n              - write                 = false -&gt; null\n            }\n          - minute_metrics {\n              - enabled               = false -&gt; null\n              - include_apis          = false -&gt; null\n              - retention_policy_days = 0 -&gt; null\n              - version               = \"1.0\" -&gt; null\n            }\n        }\n\n      - share_properties {\n          - retention_policy {\n              - days = 7 -&gt; null\n            }\n        }\n    }\n\n  # random_id.suffix will be destroyed\n  # (because random_id.suffix is not in configuration)\n  - resource \"random_id\" \"suffix\" {\n      - b64_std     = \"1k8pWg==\" -&gt; null\n      - b64_url     = \"1k8pWg\" -&gt; null\n      - byte_length = 4 -&gt; null\n      - dec         = \"3595512154\" -&gt; null\n      - hex         = \"d64f295a\" -&gt; null\n      - id          = \"1k8pWg\" -&gt; null\n    }\n\nPlan: 0 to add, 0 to change, 2 to destroy.\n</code></pre> <p>Note how the plan wants to destroy the previously created resources. This is because those resources no longer exist in your code. If resources have been removed from your code, they should also be removed from Azure.</p> <li> <p>Run the execution plan:</p> <pre><code>terraform apply tfplan\n</code></pre> </li> <li> <p>Verify that the resource group is empty again:</p> <pre><code>az resource list -g example-rg -o table\n</code></pre> <p>If nothing is returned, then the resource group is empty, meaning that the Storage account has been destroyed.</p> </li> <p>Congrats, you've managed the full lifecycle of an Azure Storage account using Terraform!</p>"},{"location":"get-started/prerequisites/","title":"Prerequisites","text":""},{"location":"get-started/prerequisites/#install-tools","title":"Install tools","text":"<ul> <li>Install Terraform</li> <li>Install Azure CLI</li> <li>If you're using VS Code, install the Terraform Extension for VS Code</li> </ul>"},{"location":"get-started/prerequisites/#create-resource-group-in-azure","title":"Create resource group in Azure","text":"<p>Using the Azure CLI, create a resource group in Azure to contain the resources created during this tutorial:</p> <ol> <li> <p>Login to Azure:</p> <pre><code>az login\n</code></pre> </li> <li> <p>Set active subscription:</p> <pre><code>az account set -s &lt;SUBSCRIPTION_NAME_OR_ID&gt;\n</code></pre> </li> <li> <p>Create a resource group:</p> <pre><code>$ az group create -n example-rg -l northeurope -o table\nLocation     Name\n-----------  ----------\nnortheurope  example-rg\n</code></pre> </li> </ol> <p>Now we're ready to start learning about Terraform, starting with the basic syntax.</p>"},{"location":"get-started/summary/","title":"Summary","text":"<p>You should now be familiar with:</p> <ul> <li>Basic Terraform syntax.</li> <li>Writing a simple Terraform configuration.</li> <li>Installing required provider plugins using the <code>terraform init</code> command.</li> <li>Validating your Terraform configuration using the <code>terraform validate</code> command.</li> <li>Generating an execution plan using the <code>terraform plan</code> command.</li> <li>Running the execution plan using the <code>terraform apply</code> command.</li> </ul>"},{"location":"get-started/syntax/","title":"Syntax","text":"<p>A Terraform configuration consists of one or more <code>.tf</code> files, which are built around blocks, labels and arguments:</p> <pre><code>&lt;block&gt; \"&lt;label&gt;\" {\n  &lt;argument&gt; = &lt;value&gt;\n}\n</code></pre> <p>In this tutorial, you'll get familiar with the three most common block types in Terraform:</p> <ol> <li>Provider blocks</li> <li>Resource blocks</li> <li>Data blocks</li> </ol>"},{"location":"get-started/syntax/#blocks","title":"Blocks","text":""},{"location":"get-started/syntax/#provider-blocks","title":"Provider blocks","text":"<p>Terraform is a cloud agnostic infrastructure as code tool, which means that it can be used across various different cloud providers (AWS, GCP and Azure among others).</p> <p>To work with a given cloud provider, Terraform needs to install a plugin for that provider. Plugins are available in the Terraform Registry.</p> <p>Use provider blocks to configure provider plugins:</p> <pre><code>provider \"&lt;provider&gt;\" {\n  &lt;argument&gt; = &lt;value&gt;\n}\n</code></pre> <p>For example, to configure the Azure provider plugin:</p> <pre><code>provider \"azurerm\" {\n  features {}\n}\n</code></pre>"},{"location":"get-started/syntax/#resource-blocks","title":"Resource blocks","text":"<p>Use resource blocks to create new resources:</p> <pre><code>resource \"&lt;provider&gt;_&lt;resource&gt;\" \"&lt;name&gt;\" {\n  &lt;argument&gt; = &lt;value&gt;\n}\n</code></pre> <p>For example:</p> <pre><code>resource \"azurerm_storage_account\" \"example\" {\n  name                     = \"examplest\"\n  resource_group_name      = \"example-rg\"\n  location                 = \"northeurope\"\n  account_tier             = \"Standard\"\n  account_replication_type = \"LRS\"\n}\n</code></pre>"},{"location":"get-started/syntax/#data-blocks","title":"Data blocks","text":"<p>Use data blocks to read an existing resource:</p> <pre><code>data \"&lt;provider&gt;_&lt;resource&gt;\" \"&lt;name&gt;\" {\n  &lt;argument&gt; = &lt;value&gt;\n}\n</code></pre> <p>For example:</p> <pre><code>data \"azurerm_resource_group\" \"example\" {\n  name = \"example-rg\"\n}\n</code></pre>"},{"location":"get-started/syntax/#references","title":"References","text":"<p>Blocks can reference arguments and attributes from other blocks.</p> <p>For example:</p> <pre><code>data \"azurerm_resource_group\" \"example\" {\n  name = \"example-rg\"\n}\n\nresource \"azurerm_storage_account\" \"example\" {\n  name                     = \"examplest\"\n  resource_group_name      = data.azurerm_resource_group.example.name\n  location                 = data.azurerm_resource_group.example.location\n  account_tier             = \"Standard\"\n  account_replication_type = \"LRS\"\n}\n</code></pre> <p>Now that we're familiar with the Terraform block types and references, let's start creating some resources!</p>"},{"location":"get-started/update-resources/","title":"Update resources","text":"<p>Next, we'll update the replication type of the Storage account:</p> <ol> <li> <p>Check Storage account SKU name:</p> <pre><code>$ az storage account list --query \"[?contains(name, 'examplest')].sku.name\" -o tsv\nStandard_LRS\n</code></pre> </li> <li> <p>In your Terraform configuration, change the replication type of the Storage account from <code>LRS</code> to <code>GRS</code>:</p> <pre><code>resource \"azurerm_storage_account\" \"example\" {\n  # omitted\n  account_replication_type = \"GRS\" # LRS =&gt; GRS\n}\n</code></pre> </li> <li> <p>Generate a new execution plan:</p> <pre><code>terraform plan -out=tfplan\n</code></pre> <p>Show execution plan <pre><code>$ terraform show tfplan\n\nTerraform used the selected providers to generate the following execution plan. Resource actions are indicated with the following symbols:\n  ~ update in-place\n\nTerraform will perform the following actions:\n\n  # azurerm_storage_account.example will be updated in-place\n  ~ resource \"azurerm_storage_account\" \"example\" {\n      ~ account_replication_type          = \"LRS\" -&gt; \"GRS\"\n        id                                = \"/subscriptions/&lt;SUBSCRIPTION_ID&gt;/resourceGroups/example-rg/providers/Microsoft.Storage/storageAccounts/examplestd64f295a\"\n        name                              = \"examplestd64f295a\"\n        tags                              = {}\n        # (36 unchanged attributes hidden)\n\n        # (4 unchanged blocks hidden)\n    }\n\nPlan: 0 to add, 1 to change, 0 to destroy.\n</code></pre> <li> <p>Run the execution plan to apply the changes:</p> <pre><code>terraform apply tfplan\n</code></pre> </li> <li> <p>Verify that the Storage account SKU name has been changed from <code>Standard_LRS</code> to <code>Standard_GRS</code>:</p> <pre><code>$ az storage account list --query \"[?contains(name, 'examplest')].sku.name\" -o tsv\nStandard_GRS\n</code></pre> </li> <p>You've just made an update to the Storage account through Terraform!</p> <p>Since we're nearing the end of this tutorial, it's time to tear down the Storage account that we've created.</p>"},{"location":"reusable-modules/","title":"Reusable modules","text":""},{"location":"reusable-modules/usage-examples/","title":"Usage examples","text":""},{"location":"reusable-modules/usage-examples/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>Must be assigned role <code>Contributor</code> at the subscription scope.</p> </li> <li> <p>Create a file <code>main.tf</code> with the following contents:</p> <pre><code>provider \"azurerm\" {\n  features {}\n}\n\nresource \"random_id\" \"example\" {\n  byte_length = 8\n}\n\nresource \"azurerm_resource_group\" \"example\" {\n  name     = \"rg-${random_id.example.hex}\"\n  location = \"northeurope\"\n}\n</code></pre> <p>It will:</p> <ul> <li>Configure the Azure provider.</li> <li>Create a random identifier to generate random resource names.</li> <li>Create an Azure resource group to contain resources.</li> </ul> </li> </ul>"},{"location":"reusable-modules/usage-examples/#setup-azure-log-analytics","title":"Setup Azure Log Analytics","text":"<pre><code>module \"log_analytics\" {\n  source = \"github.com/equinor/terraform-azurerm-log-analytics?ref=v2.1.1\"\n\n  workspace_name      = \"log-${random_id.example.hex}\"\n  resource_group_name = azurerm_resource_group.example.name\n  location            = azurerm_resource_group.example.location\n}\n</code></pre>"},{"location":"reusable-modules/usage-examples/#setup-azure-key-vault","title":"Setup Azure Key Vault","text":"<pre><code>module \"key_vault\" {\n  source = \"github.com/equinor/terraform-azurerm-key-vault?ref=v11.2.0\"\n\n  vault_name                 = \"kv-${random_id.example.hex}\"\n  resource_group_name        = azurerm_resource_group.example.name\n  location                   = azurerm_resource_group.example.location\n  log_analytics_workspace_id = module.log_analytics.workspace_id\n\n  # List of IP addresses or IP ranges in CIDR format\n  network_acls_ip_rules = []\n}\n</code></pre>"},{"location":"reusable-modules/usage-examples/#setup-azure-storage","title":"Setup Azure Storage","text":"<pre><code>module \"storage\" {\n  source = \"github.com/equinor/terraform-azurerm-storage?ref=v12.1.1\"\n\n  account_name               = \"st${random_id.example.hex}\"\n  resource_group_name        = azurerm_resource_group.example.name\n  location                   = azurerm_resource_group.example.location\n  log_analytics_workspace_id = module.log_analytics.workspace_id\n\n  # List of IP addresses or IP ranges in CIDR format\n  network_rules_ip_rules = []\n}\n</code></pre>"}]}