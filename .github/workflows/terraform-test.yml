name: Terraform Test

on:
  workflow_call:
    inputs:
      test-filter:
        description: Limit the Terraform Test operation to the specified test files.
        type: string
        required: false

jobs:
  terraform-test:
    name: Terraform Test
    runs-on: ubuntu-latest
    env:
      TF_IN_AUTOMATION: true
      TF_TEST_RESULTS_FILE: tftest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest
          terraform_wrapper: false

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Terraform Test
        id: test
        # Ensure that the outcome of this step is "failure" when "terraform test" returns a non-zero exit code
        shell: bash -o pipefail {0}
        env:
          TF_TEST_FILTER: ${{ inputs.test-filter }}
        run: terraform test -filter="$TF_TEST_FILTER" -json | tee "$TF_TEST_RESULTS_FILE"

      - name: Create job summary
        if: success() || failure()
        shell: bash {0}
        env:
          TF_FMT_OUTCOME: ${{ steps.fmt.outcome }}
          TF_INIT_OUTCOME: ${{ steps.init.outcome }}
          TF_VALIDATE_OUTCOME: ${{ steps.validate.outcome }}
          TF_TEST_OUTCOME: ${{ steps.test.outcome }}
        run: |
          tftest_results=$(cat "$TF_TEST_RESULTS_FILE")
          readarray -t tftest_array <<< "$tftest_results"

          table_rows=("| Path | Run | Status | Details |")
          table_rows+=("| --- | --- | --- | --- |")

          for tftest_json in "${tftest_array[@]}"; do
            type=$(echo "$tftest_json" | jq -r .type)

            if [[ "$type" != "test_run" ]]; then
              continue
            fi

            test_run=$(echo "$tftest_json" | jq .test_run)
            progress=$(echo "$test_run" | jq -r .progress)

            if [[ "$progress" != "complete" ]]; then
              continue
            fi

            path=$(echo "$test_run" | jq -r .path)
            run=$(echo "$test_run" | jq -r .run)
            status=$(echo "$test_run" | jq -r .status)
            status_emoji="heavy_minus_sign" # neutral/unknown by default

            if [[ "$status" == "pass" ]]; then
              status_emoji="heavy_check_mark"
            fi

            error_message=""
            if [[ "$status" == "fail" || "$status" == "error" ]]; then
              status_emoji="x"
            fi

            # Get all errors for relevant file and run
            details=$(echo "$tftest_results" | jq -r --arg testfile "$path" --arg testrun "$run" 'select(."@level"=="error" and ."@testfile"==$testfile and ."@testrun"==$testrun) | .diagnostic.detail')

            # Replace newlines with HTML <br> tags
            details=$(echo "$details" | sed ':a;N;$!ba;s/\n/<br>/g')
            # sed commands explained:
            # 1) ':a'          - create a label (:) 'a' that we can branch back to.
            # 2) 'N'           - append next (N) line.
            # 3) '$!ba'        - if next line is not (!) the last line ($), branch (b) back to label 'a'.
            # 4) 's/\n/<br>/g' - substitute (s) \n with <br> globally (g).
            #
            # Summary: append all lines and substitue all newlines with HTML <br> tags.
            # Ref: https://www.gnu.org/software/sed/manual/html_node/sed-commands-list.html

            table_rows+=("| \`$path\` | \`$run\` | :$status_emoji:**\`$status\`** | $details |")
          done

          table=$(printf "%s\n" "${table_rows[@]}")

          echo "#### Terraform Format and Style ðŸ–Œ\`$TF_FMT_OUTCOME\`
          #### Terraform Initialization âš™\`$TF_INIT_OUTCOME\`
          #### Terraform Validation ðŸ¤–\`$TF_VALIDATE_OUTCOME\`
          #### Terraform Test ðŸ§ª\`$TF_TEST_OUTCOME\`

          <details><summary>Show Tests</summary>

          $table

          </details>

          *Pusher: @$GITHUB_ACTOR, Action: \`$GITHUB_EVENT_NAME\`, Workflow: \`$GITHUB_WORKFLOW\`*" >> "$GITHUB_STEP_SUMMARY"
